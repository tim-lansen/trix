# -*- coding: utf-8 -*-
# tim.lansen@gmail.com


import json
import time
from .jsoner import JSONer


def class_py2coffee(Class, script=None):
    inst = Class()
    inst.full_instance()
    result = "# This script was automatically generated by 'class_py2coffee' from Python class {}\n".format(Class.__name__)
    result += "# {}".format(time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(time.time())))
    obj_json = json.loads(inst.dumps(expose_none=True))

    classes_list = [{
        'name': Class.__name__,
        'class': obj_json
    }]

    def _dig_(_cl_, _base_):
        for _m_ in _cl_:
            _v_ = _cl_[_m_]
            if type(_v_) is list:
                if len(_v_) and type(_v_[0]) is dict:
                    # List of subclass instances
                    _new_base_ = _base_ + [JSONer.subclass_name(_m_, array=True)]
                    subclass_name = '_'.join(_new_base_)
                    classes_list.append({
                        'name': subclass_name,
                        'class': _v_[0]
                    })
                    _dig_(_v_[0], _new_base_)
                    continue
            elif type(_v_) is dict:
                if len(_v_):
                    _new_base_ = _base_ + [JSONer.subclass_name(_m_, array=False)]
                    subclass_name = '_'.join(_new_base_)
                    classes_list.append({
                        'name': subclass_name,
                        'class': _v_
                    })
                    _dig_(_v_, _new_base_)
                    continue

    _dig_(obj_json, [Class.__name__])

    for i in range(len(classes_list)):
        desc = classes_list[-1-i]
        result += '\n\nclass {}\n    constructor: () ->\n'.format(desc['name'])
        for m in desc['class']:
            v = desc['class'][m]
            mm = '["default"]' if m == 'default' else m
            if type(v) is dict:
                result += '        @{} = {{}}\n'.format(mm)
            elif type(v) is list:
                result += '        @{} = []\n'.format(mm)
            elif type(v) is int:
                result += '        @{} = {}\n'.format(mm, v)
            elif type(v) is str:
                result += '        @{} = "{}"\n'.format(mm, v)
            else:
                result += '        @{} = null  # {}\n'.format(mm, v)

    if script:
        try:
            f = open(script, 'w')
            f.write(result)
            f.close()
        except:
            pass
    return result
