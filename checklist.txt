0 Назначение сервиса

Какие задачи решает.
    ускоряет, упрощает и оптимизирует процесс инжеста
Возможности.
    с минимальным привлечением человеческих ресурсов, используя доступные мощности параллельно, готовит архивные копии исходников, присылаемых правообладателями
    планируется расширение области применения в сторону производства продакшен-файлов

1 Архитектура сервиса

1.2 Внутреннее устройство сервиса, компоненты
1.2.1 На каком языке написан сервис (название и версия)
    серверная часть: Python 3.6 (транслируется в 3.5), C++
    клиентская часть: JS, Coffeescript (транслируется в JS), Jade (транслируется в HTML+JS), less (css)
1.2.2 Убедиться, что такой язык (и версия) есть у службы эксплуатации
1.2.3 Необходимые системные пакеты (модули/плагины к языку, разные БД и т.д.), которые нужно установить на сервер
    система (все ноды):
        ssh server+client
        sshfs
        cifs-utils
    система (одна нода):
        nginx
        postgresql
    поддержка сборки:
        yasm libnuma-dev mercurial cmake cmake-curses-gui build-essential autoconf autogen
        nasm
    пакеты с инструментами:
        ffmpeg
        mediainfo
        sox
        gpac
    инструменты, собираемые из исходников
        x264 (две версии: x264.08, x264.10)
        x265 (три версии: x265.08, x265.10, x265.12)
    Python 3.5:
        psycopg2
        Unidecode
        python_slugify
1.3 Взаимодействие компонентов сервиса между собой, внутренние связи, потоки данных
    Компоненты сервиса:
        api server (python) - websocket API server
        web server (nginx)
        dispatcher (python)
        database (postgresql)
        worker (python, cpp, binaries) - execution engine
    окружение:
        source: примонтированные ресурсы с исходными файлами (пока - синолоджи)
        output: примонтированные ресурсы для выгрузки (сервер оригиналов, файло)
        preview: примонтированный ресурс для выгрузки файлов, доступных через nginx
        cache: на одной ноде - расшаренный RAM disk
    api server:
        слушает порт 9001
        ходит в database
        читает source
    web server:
        слушает порт 80
        ходит на preview
    dispatcher:
        ходит в database
    workers:
        ходят в database
        много читают source
        много пишут в output, cache
        пишут в preview

1.4 Как данные попадают в сервис?
    synology (sshfs)
    api server (operator's interface)
1.4.1 Как принимаются запросы? (слушается какой-то порт (какой?), запускается как uwsgi приложение, и т.д.)
    80 (http), 9001 (websocket)
1.5 Какие данные производит?
    медиафайлы
1.6 Какой функционал доступен извне?
    инициирование комплексных задач по обработке медиа
1.7 Как связан с другими сервисами Иви?
    медиафайлы будут передаваться на сервера оригиналов и на файловые сервера
    в перспективе - запросы с api server к mobileapi
1.8 Ходит ли сервис наружу?
    пока нет


2 Мониторинг

2.1 Мониторинг работоспособности
Сервиса в целом и компонент.
2.1.1 Что можно сделать, чтобы проверить, что сервис жив?
    открыть страницу http://trix-nginx/interface
2.1.2 Если используестя statsd, нужно указать конкретные имена метрик.
    планируем: пуск/стоп джобов, успех/неуспех, время исполнения

2.2 Мониторинг скорости ответа
Сервиса в целом и компонент.
    время ответа nginx, wsapi
2.2.1 Если используестя statsd, нужно указать конкретные имена метрик.
    планируем: время ответа базы
2.3 Мониторинг нагрузки.
На сервис в целом и на компоненты.
    нагрузка на CPU по каждой ноде, загрузка сети, диски, частота запросов в базу, время ответа базы
2.3.1 Если используестя statsd, нужно указать конкретные имена метрик.
   
3 Масштабирование
3.1 Можно ли запустить сервис на нескольких серверах
    web server, api server, dispatcher, database могут быть на разных серверах, но в одном экземпляре
    workers работают на произвольном числе серверов
3.2 Есть ли кроны (которые должны работать только на одном сервере)
    планируем синк базы
    функции кронов отчасти выполняет dispatcher

4 Распределённость
4.1 Возможность работать в нескольких ЦОД
    есть
4.2 Поведение при разрыве сетевой связности
    dispatcher при недоступности базы продолжает в неё стучаться, увеличивает таймаут для worker
    dispatcher при таймауте реакции воркера на пинок помечает его в базе и перезапускает его джобу на доступном воркере
    worker при недоступности базы продолжает делать дело
    worker при таймауте пинка от dispatcher смотрит, не пометили ли его в базе, если пометили - отстреливает джобу и регается заново
    worker при недоступности примонтированного ресурса фейлит джобу (система пытается примонтировать заново)
    api server при недоступности базы продолжает в неё стучаться
    api server при недоступности source перестаёт принимать запросы на обработку от интерфейса
4.3 Поведение при восстановлении сетевой связности
    dispatcher продолжает нормально работать
    worker при восстановлении соединения с базой проверяет, не пометили ли его, если да - не регистрирует результаты джобы, если таковые имеются

5 Таймауты
5.1 Поведение сервиса при недоступности используемых ресурсов
    
5.2 В течении какого времени ожидать ответа от сервиса
    10 секунд

6 Логирование
6.1 Кто/что/куда логирует
    worker логирует запуск и завершение задач, вывод процессов и retcodes в случае провала, события вроде недоступности базы
        /logs/trix/workers/<hostname>/<index>/<YYYY-MM-DD>.log
    dispatcher логирует все изменения, которые вносит в базу
        /logs/trix/dispatcher/<hostname>/<YYYY-MM-DD>.log
    api server логирует все запросы к API
        /logs/trix/api_server/<hostname>/<YYYY-MM-DD>.log
6.2 Расположение логов
6.2.1 Логи должны лежать в /logs/<servicename>
6.2.2 Syslog логирование должно идти с указанием имени сервиса в поле TAG и правильным Severity (Error для ошибок, Debug для отладки и т.д.)

7 Известные проблемы (узкие места)
    При падении database остановятся процессы, интерфейс промолчит (в перспективе покажет проблему)
    При падении api server замрёт интерфейс
    При падении web server интерфейс не сможет воспроизводить медиа

8 Создание резервных копий и восстановление
8.1 Есть ли данные для бекапа (файлы/данные в БД/redis/...)
    нет
8.2 Восстановление из резервной копии

9 Развёртывание сервиса/компонент
9.1 Развёртывание с "0"
9.1.1 Код должен лежать в /www/<servicename>
9.1.2 Бинари (на go и т.п.) в /www/<servicename>/bin/
9.2 Выгрузка
9.2.1 Как выгружать код (правильно - через updater)
9.2.1 Откуда брать
    git clone -b master http://gitlab.dev.ivi.ru/tlansen/trix.git
9.2.2 Что нужно выгружать (какие файлы, в какие папки и т.д.)
9.2.3 Какие команды нужно запускать при выгрузке
    после git clone
    worker:
        trix/setup.sh worker
    api server:
    web server:
    database:

10 Управление
10.1 Как запускать/останавливать/перезапускать
10.1.1 Строка запуска со всеми нужными параметрами и переменными окружения
    worker:
        trix/backend/worker_pool.sh
10.1.2 init скрипты (если уже есть)
